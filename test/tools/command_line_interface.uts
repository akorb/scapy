% Regression tests for CommandLineInterface

+ Configuration
~ conf

= Imports
import mock
from scapy.tools.packet_viewer.command_line_interface import CommandLineInterface

= Function definitions
@mock.patch("scapy.tools.packet_viewer.main_window.MainWindow")
def setUp(main_window_mock):
    main_window_mock = main_window_mock
    command_line = CommandLineInterface(main_window_mock)
    return main_window_mock, command_line


def assert_command_execution(command_line, command=None, func_assert_once=None, key="enter", expected_edit_text=""):
    if command:
        command_line.set_edit_text(command)
    command_line.keypress((12,), key)
    if func_assert_once:
        func_assert_once.assert_called_once()
    got = command_line.edit_text
    assert got == expected_edit_text, "got: %r expected: %r" % (got, expected_edit_text)
    expected_caption_text = ''
    got = command_line.caption
    assert got == expected_caption_text, "got: %r expected: %r" % (got, expected_caption_text)


+ Tests

= Test focus
_, command_line = setUp()
expected_text = [b' ']
got = command_line.render((1,)).text
assert got == expected_text, "got: %r expected: %r" % (got, expected_text)

= Test empty command
_, command_line = setUp()
assert_command_execution(command_line)

= Test 'up' key
_, command_line = setUp()
assert_command_execution(command_line, key="up")

= Test pause command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "pause", main_window_mock.pause_packet_sniffer)

= Test pause partial command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "pau", main_window_mock.pause_packet_sniffer)

= Test pause single command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "p", main_window_mock.pause_packet_sniffer)

= Test quit command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "quit", main_window_mock.quit)

= Test quit partial command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "qu", main_window_mock.quit)

= Test quit single command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "q", main_window_mock.quit)

= Test continue command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "continue", main_window_mock.continue_packet_sniffer)

= Test continue partial command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "cont", main_window_mock.continue_packet_sniffer)

= Test continue single command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "c", main_window_mock.continue_packet_sniffer)

= Test invalid command
main_window_mock, command_line = setUp()
assert_command_execution(command_line, "invalid",
                         expected_edit_text="Error: Invalid command. Choose from: quit, pause, continue")
